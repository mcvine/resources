/SNS/users/linjiao/release-builders/mcvine/EXPORT/modules/mccomposite/bindings/BoostPythonBinding.py:15: RuntimeWarning: to-Python converter for mcni::Vector3<double> already registered; second conversion method ignored.
  import mccomposite.mccompositebp as binding
/SNS/users/linjiao/release-builders/mcvine/EXPORT/modules/mccomposite/bindings/BoostPythonBinding.py:15: RuntimeWarning: to-Python converter for mcni::RotationMatrix<double> already registered; second conversion method ignored.
  import mccomposite.mccompositebp as binding
/SNS/users/linjiao/release-builders/mcvine/EXPORT/modules/mccomposite/bindings/BoostPythonBinding.py:15: RuntimeWarning: to-Python converter for mcni::Position<double> already registered; second conversion method ignored.
  import mccomposite.mccompositebp as binding
** mpi4py NOT available
* pyre mpi available
Generating pml for arcs beam instrument...
 -> running arcs-m2s -fermi_chopper=100-1.5-SMI -fermi_nu=480.0 -E=80.0 -T0_nu=60.0 -emission_time=-1.0 --- -dump-pml=yes -h...
/SNS/users/linjiao/release-builders/mcvine/EXPORT/modules/mccomposite/bindings/BoostPythonBinding.py:15: RuntimeWarning: to-Python converter for mcni::Vector3<double> already registered; second conversion method ignored.
  import mccomposite.mccompositebp as binding
/SNS/users/linjiao/release-builders/mcvine/EXPORT/modules/mccomposite/bindings/BoostPythonBinding.py:15: RuntimeWarning: to-Python converter for mcni::RotationMatrix<double> already registered; second conversion method ignored.
  import mccomposite.mccompositebp as binding
/SNS/users/linjiao/release-builders/mcvine/EXPORT/modules/mccomposite/bindings/BoostPythonBinding.py:15: RuntimeWarning: to-Python converter for mcni::Position<double> already registered; second conversion method ignored.
  import mccomposite.mccompositebp as binding
** mpi4py NOT available
* pyre mpi available
moderator emission time for neutron of energy 80.0 is 5.43495810235e-07
moderator emission time for neutron of energy 80.0 is 5.43495810235e-07
------------------------------------------------------------
* Instrument simulation application 'arcs_moderator2sample'
------------------------------------------------------------
* Sequence of components:
   [moderator(sources/SNS_source_r1)] --> [core_vessel_insert(optics/Guide_channeled)] --> [shutter_guide(optics/Guide_channeled)] --> [guide111(optics/Guide_channeled)] --> [guide112(optics/Guide_channeled)] --> [guide113(optics/Guide_channeled)] --> [guide121(optics/Guide_channeled)] --> [guide122(optics/Guide_channeled)] --> [guide123(optics/Guide_channeled)] --> [guide131(optics/Guide_channeled)] --> [guide132(optics/Guide_channeled)] --> [guide133(optics/Guide_channeled)] --> [t0chopper(optics/Vertical_T0)] --> [guide211(optics/Guide_channeled)] --> [guide212(optics/Guide_channeled)] --> [guide213(optics/Guide_channeled)] --> [guide214(optics/Guide_channeled)] --> [guide215(optics/Guide_channeled)] --> [fermichopper(fermichopper-100-1.5-SMI)] --> [monitor1(monitors/TOF_monitor2)] --> [guide311(optics/Guide_channeled)] --> [guide411(optics/Guide_channeled)] --> [guide412(optics/Guide_channeled)] --> [guide511(optics/Dummy)] --> [monitor(monitors/NeutronToStorage)] --> [monitor2(monitors/TOF_monitor2)]
------------------------------------------------------------
* Command:
 $ arcs_moderator2sample  \
  --dump-instrument=<dump-instrument> \
  --output-dir=<output directory> \
  --ncount=<number of total neutrons generated by source> \
  --launcher=<launcher> \
  --mode=<mode> \
  --tracer=<tracer> \
  --dumpconfiguration=<If set, dump configuration to a pml file> \
  --dumpconfiguration-output=<Output file path of dumped configuration file (pml)> \
  --dump-registry=<if true, dump the pyre registry to a pkl file> \
  --multiple-scattering=<if true, enable multiple scattering> \
  --buffer_size=<size of neutron buffer. This is for optimizing the preformance of the simulation. When it is too large, it will occupy too much memory. When it is too small, the simulation will be slow. If you are not sure, please just leave it unset so that the default value will be used.> \
  --dump-pml=<filename of output configuration (pml) file. if empty, ignored. if the given value is 'yes' or 'on', a default filename will be used.> \
  --overwrite-datafiles=<overwrite data files?> \
  --geometer.moderator=<position>,<orientation> \
  --geometer.core_vessel_insert=<position>,<orientation> \
  --geometer.shutter_guide=<position>,<orientation> \
  --geometer.guide111=<position>,<orientation> \
  --geometer.guide112=<position>,<orientation> \
  --geometer.guide113=<position>,<orientation> \
  --geometer.guide121=<position>,<orientation> \
  --geometer.guide122=<position>,<orientation> \
  --geometer.guide123=<position>,<orientation> \
  --geometer.guide131=<position>,<orientation> \
  --geometer.guide132=<position>,<orientation> \
  --geometer.guide133=<position>,<orientation> \
  --geometer.t0chopper=<position>,<orientation> \
  --geometer.guide211=<position>,<orientation> \
  --geometer.guide212=<position>,<orientation> \
  --geometer.guide213=<position>,<orientation> \
  --geometer.guide214=<position>,<orientation> \
  --geometer.guide215=<position>,<orientation> \
  --geometer.fermichopper=<position>,<orientation> \
  --geometer.monitor1=<position>,<orientation> \
  --geometer.guide311=<position>,<orientation> \
  --geometer.guide411=<position>,<orientation> \
  --geometer.guide412=<position>,<orientation> \
  --geometer.guide511=<position>,<orientation> \
  --geometer.monitor=<position>,<orientation> \
  --geometer.monitor2=<position>,<orientation> \
  --moderator=<component type> \
  --core_vessel_insert=<component type> \
  --shutter_guide=<component type> \
  --guide111=<component type> \
  --guide112=<component type> \
  --guide113=<component type> \
  --guide121=<component type> \
  --guide122=<component type> \
  --guide123=<component type> \
  --guide131=<component type> \
  --guide132=<component type> \
  --guide133=<component type> \
  --t0chopper=<component type> \
  --guide211=<component type> \
  --guide212=<component type> \
  --guide213=<component type> \
  --guide214=<component type> \
  --guide215=<component type> \
  --fermichopper=<component type> \
  --monitor1=<component type> \
  --guide311=<component type> \
  --guide411=<component type> \
  --guide412=<component type> \
  --guide511=<component type> \
  --monitor=<component type> \
  --monitor2=<component type> \
  --moderator.yh=<(m)   Height of focusing rectangle> \
  --moderator.dist=<(m)   Distance from source to the focusing rectangle> \
  --moderator.Emin=<(meV)   minimum energy of neutron to generate> \
  --moderator.Emax=<(meV)   maximum energy of neutron to generate> \
  --moderator.S_filename=<Filename of source data> \
  --moderator.width=<(m)   width of moderator> \
  --moderator.height=<(m)   height of moderator> \
  --moderator.xw=<(m)   Width of focusing rectangle> \
  --core_vessel_insert.R0=<(1)    Low-angle reflectivity> \
  --core_vessel_insert.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --core_vessel_insert.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --core_vessel_insert.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --core_vessel_insert.h1=<(m)    Height at the guide entry> \
  --core_vessel_insert.l=<(m)    Length of guide> \
  --core_vessel_insert.d=<(m)    Thickness of subdividing walls> \
  --core_vessel_insert.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --core_vessel_insert.h2=<(m)    Height at the guide exit> \
  --core_vessel_insert.w1=<(m)    Width at the guide entry> \
  --core_vessel_insert.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --core_vessel_insert.k=<(1)    Number of channels in the guide (>= 1)> \
  --core_vessel_insert.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --core_vessel_insert.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --core_vessel_insert.w2=<(m)    Width at the guide exit> \
  --shutter_guide.R0=<(1)    Low-angle reflectivity> \
  --shutter_guide.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --shutter_guide.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --shutter_guide.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --shutter_guide.h1=<(m)    Height at the guide entry> \
  --shutter_guide.l=<(m)    Length of guide> \
  --shutter_guide.d=<(m)    Thickness of subdividing walls> \
  --shutter_guide.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --shutter_guide.h2=<(m)    Height at the guide exit> \
  --shutter_guide.w1=<(m)    Width at the guide entry> \
  --shutter_guide.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --shutter_guide.k=<(1)    Number of channels in the guide (>= 1)> \
  --shutter_guide.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --shutter_guide.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --shutter_guide.w2=<(m)    Width at the guide exit> \
  --guide111.R0=<(1)    Low-angle reflectivity> \
  --guide111.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide111.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide111.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide111.h1=<(m)    Height at the guide entry> \
  --guide111.l=<(m)    Length of guide> \
  --guide111.d=<(m)    Thickness of subdividing walls> \
  --guide111.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide111.h2=<(m)    Height at the guide exit> \
  --guide111.w1=<(m)    Width at the guide entry> \
  --guide111.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide111.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide111.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide111.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide111.w2=<(m)    Width at the guide exit> \
  --guide112.R0=<(1)    Low-angle reflectivity> \
  --guide112.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide112.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide112.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide112.h1=<(m)    Height at the guide entry> \
  --guide112.l=<(m)    Length of guide> \
  --guide112.d=<(m)    Thickness of subdividing walls> \
  --guide112.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide112.h2=<(m)    Height at the guide exit> \
  --guide112.w1=<(m)    Width at the guide entry> \
  --guide112.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide112.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide112.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide112.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide112.w2=<(m)    Width at the guide exit> \
  --guide113.R0=<(1)    Low-angle reflectivity> \
  --guide113.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide113.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide113.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide113.h1=<(m)    Height at the guide entry> \
  --guide113.l=<(m)    Length of guide> \
  --guide113.d=<(m)    Thickness of subdividing walls> \
  --guide113.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide113.h2=<(m)    Height at the guide exit> \
  --guide113.w1=<(m)    Width at the guide entry> \
  --guide113.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide113.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide113.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide113.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide113.w2=<(m)    Width at the guide exit> \
  --guide121.R0=<(1)    Low-angle reflectivity> \
  --guide121.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide121.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide121.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide121.h1=<(m)    Height at the guide entry> \
  --guide121.l=<(m)    Length of guide> \
  --guide121.d=<(m)    Thickness of subdividing walls> \
  --guide121.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide121.h2=<(m)    Height at the guide exit> \
  --guide121.w1=<(m)    Width at the guide entry> \
  --guide121.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide121.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide121.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide121.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide121.w2=<(m)    Width at the guide exit> \
  --guide122.R0=<(1)    Low-angle reflectivity> \
  --guide122.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide122.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide122.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide122.h1=<(m)    Height at the guide entry> \
  --guide122.l=<(m)    Length of guide> \
  --guide122.d=<(m)    Thickness of subdividing walls> \
  --guide122.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide122.h2=<(m)    Height at the guide exit> \
  --guide122.w1=<(m)    Width at the guide entry> \
  --guide122.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide122.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide122.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide122.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide122.w2=<(m)    Width at the guide exit> \
  --guide123.R0=<(1)    Low-angle reflectivity> \
  --guide123.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide123.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide123.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide123.h1=<(m)    Height at the guide entry> \
  --guide123.l=<(m)    Length of guide> \
  --guide123.d=<(m)    Thickness of subdividing walls> \
  --guide123.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide123.h2=<(m)    Height at the guide exit> \
  --guide123.w1=<(m)    Width at the guide entry> \
  --guide123.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide123.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide123.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide123.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide123.w2=<(m)    Width at the guide exit> \
  --guide131.R0=<(1)    Low-angle reflectivity> \
  --guide131.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide131.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide131.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide131.h1=<(m)    Height at the guide entry> \
  --guide131.l=<(m)    Length of guide> \
  --guide131.d=<(m)    Thickness of subdividing walls> \
  --guide131.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide131.h2=<(m)    Height at the guide exit> \
  --guide131.w1=<(m)    Width at the guide entry> \
  --guide131.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide131.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide131.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide131.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide131.w2=<(m)    Width at the guide exit> \
  --guide132.R0=<(1)    Low-angle reflectivity> \
  --guide132.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide132.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide132.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide132.h1=<(m)    Height at the guide entry> \
  --guide132.l=<(m)    Length of guide> \
  --guide132.d=<(m)    Thickness of subdividing walls> \
  --guide132.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide132.h2=<(m)    Height at the guide exit> \
  --guide132.w1=<(m)    Width at the guide entry> \
  --guide132.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide132.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide132.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide132.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide132.w2=<(m)    Width at the guide exit> \
  --guide133.R0=<(1)    Low-angle reflectivity> \
  --guide133.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide133.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide133.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide133.h1=<(m)    Height at the guide entry> \
  --guide133.l=<(m)    Length of guide> \
  --guide133.d=<(m)    Thickness of subdividing walls> \
  --guide133.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide133.h2=<(m)    Height at the guide exit> \
  --guide133.w1=<(m)    Width at the guide entry> \
  --guide133.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide133.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide133.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide133.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide133.w2=<(m)    Width at the guide exit> \
  --t0chopper.w2=<edgewidth> \
  --t0chopper.len=<length of slot (m)> \
  --t0chopper.tc=<time when desired neutron is at the center of the chopper (sec)> \
  --t0chopper.ymax=<Upper y bound (m)> \
  --t0chopper.w1=<center width (m)> \
  --t0chopper.delta=<time from edge of chopper to center Phase angle (sec)> \
  --t0chopper.ymin=<Lower y bound (m)> \
  --t0chopper.nu=<frequency (Hz)> \
  --guide211.R0=<(1)    Low-angle reflectivity> \
  --guide211.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide211.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide211.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide211.h1=<(m)    Height at the guide entry> \
  --guide211.l=<(m)    Length of guide> \
  --guide211.d=<(m)    Thickness of subdividing walls> \
  --guide211.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide211.h2=<(m)    Height at the guide exit> \
  --guide211.w1=<(m)    Width at the guide entry> \
  --guide211.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide211.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide211.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide211.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide211.w2=<(m)    Width at the guide exit> \
  --guide212.R0=<(1)    Low-angle reflectivity> \
  --guide212.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide212.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide212.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide212.h1=<(m)    Height at the guide entry> \
  --guide212.l=<(m)    Length of guide> \
  --guide212.d=<(m)    Thickness of subdividing walls> \
  --guide212.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide212.h2=<(m)    Height at the guide exit> \
  --guide212.w1=<(m)    Width at the guide entry> \
  --guide212.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide212.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide212.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide212.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide212.w2=<(m)    Width at the guide exit> \
  --guide213.R0=<(1)    Low-angle reflectivity> \
  --guide213.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide213.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide213.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide213.h1=<(m)    Height at the guide entry> \
  --guide213.l=<(m)    Length of guide> \
  --guide213.d=<(m)    Thickness of subdividing walls> \
  --guide213.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide213.h2=<(m)    Height at the guide exit> \
  --guide213.w1=<(m)    Width at the guide entry> \
  --guide213.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide213.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide213.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide213.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide213.w2=<(m)    Width at the guide exit> \
  --guide214.R0=<(1)    Low-angle reflectivity> \
  --guide214.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide214.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide214.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide214.h1=<(m)    Height at the guide entry> \
  --guide214.l=<(m)    Length of guide> \
  --guide214.d=<(m)    Thickness of subdividing walls> \
  --guide214.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide214.h2=<(m)    Height at the guide exit> \
  --guide214.w1=<(m)    Width at the guide entry> \
  --guide214.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide214.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide214.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide214.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide214.w2=<(m)    Width at the guide exit> \
  --guide215.R0=<(1)    Low-angle reflectivity> \
  --guide215.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide215.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide215.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide215.h1=<(m)    Height at the guide entry> \
  --guide215.l=<(m)    Length of guide> \
  --guide215.d=<(m)    Thickness of subdividing walls> \
  --guide215.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide215.h2=<(m)    Height at the guide exit> \
  --guide215.w1=<(m)    Width at the guide entry> \
  --guide215.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide215.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide215.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide215.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide215.w2=<(m)    Width at the guide exit> \
  --fermichopper.ymax=<Upper y bound (m)> \
  --fermichopper.max_iter=<max_iter> \
  --fermichopper.len=<slit package length (m)> \
  --fermichopper.tc=<time when desired neutron is at the center of the chopper (sec)> \
  --fermichopper.w=<slit package width (m)> \
  --fermichopper.nchan=<number of channels in chopper (1)> \
  --fermichopper.bw=<blade width (m)> \
  --fermichopper.delta=<time from edge of chopper to center Phase angle (sec)> \
  --fermichopper.ymin=<Lower y bound (m)> \
  --fermichopper.nu=<frequency (Hz)> \
  --fermichopper.blader=<blade radius (m)> \
  --monitor1.tmin=<lower t bound of detector (s)> \
  --monitor1.tmax=<upper t bound of detector (s)> \
  --monitor1.restore_neutron=<restore_neutron> \
  --monitor1.filename=<Name of file in which to store the detector image (text)> \
  --monitor1.nchan=<number of time bins (1)> \
  --monitor1.xmax=<Upper x bound of detector opening (m)> \
  --monitor1.xmin=<Lower x bound of detector opening (m)> \
  --monitor1.ymin=<Lower y bound of detector opening (m)> \
  --monitor1.ymax=<Upper y bound of detector opening (m)> \
  --guide311.R0=<(1)    Low-angle reflectivity> \
  --guide311.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide311.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide311.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide311.h1=<(m)    Height at the guide entry> \
  --guide311.l=<(m)    Length of guide> \
  --guide311.d=<(m)    Thickness of subdividing walls> \
  --guide311.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide311.h2=<(m)    Height at the guide exit> \
  --guide311.w1=<(m)    Width at the guide entry> \
  --guide311.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide311.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide311.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide311.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide311.w2=<(m)    Width at the guide exit> \
  --guide411.R0=<(1)    Low-angle reflectivity> \
  --guide411.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide411.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide411.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide411.h1=<(m)    Height at the guide entry> \
  --guide411.l=<(m)    Length of guide> \
  --guide411.d=<(m)    Thickness of subdividing walls> \
  --guide411.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide411.h2=<(m)    Height at the guide exit> \
  --guide411.w1=<(m)    Width at the guide entry> \
  --guide411.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide411.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide411.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide411.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide411.w2=<(m)    Width at the guide exit> \
  --guide412.R0=<(1)    Low-angle reflectivity> \
  --guide412.alphay=<(AA)   Slope of reflectivity for top and bottom mirrors> \
  --guide412.Qcx=<(AA-1) Critical scattering vector for left and right vertical> \
  --guide412.Qcy=<(AA-1) Critical scattering vector for top and bottom mirrors> \
  --guide412.h1=<(m)    Height at the guide entry> \
  --guide412.l=<(m)    Length of guide> \
  --guide412.d=<(m)    Thickness of subdividing walls> \
  --guide412.W=<(AA-1) Width of supermirror cut-off for all mirrors> \
  --guide412.h2=<(m)    Height at the guide exit> \
  --guide412.w1=<(m)    Width at the guide entry> \
  --guide412.mx=<(1)    m-value of material for left and right vertical mirrors> \
  --guide412.k=<(1)    Number of channels in the guide (>= 1)> \
  --guide412.my=<(1)    m-value of material for top and bottom mirrors. Zero> \
  --guide412.alphax=<(AA)   Slope of reflectivity for left and right vertical> \
  --guide412.w2=<(m)    Width at the guide exit> \
  --monitor.path=<The path where neutrons will be saved. This must be a relative path within the output directory of the instrument simulation application.> \
  --monitor2.tmin=<lower t bound of detector (s)> \
  --monitor2.tmax=<upper t bound of detector (s)> \
  --monitor2.restore_neutron=<restore_neutron> \
  --monitor2.filename=<Name of file in which to store the detector image (text)> \
  --monitor2.nchan=<number of time bins (1)> \
  --monitor2.xmax=<Upper x bound of detector opening (m)> \
  --monitor2.xmin=<Lower x bound of detector opening (m)> \
  --monitor2.ymin=<Lower y bound of detector opening (m)> \
  --monitor2.ymax=<Upper y bound of detector opening (m)>
------------------------------------------------------------
done.
 -> running arcs_moderator2sample -ncount=1000000000.0 -buffer_size=100000000 --output-dir=_m2sout -moderator.S_filename=/SNS/users/linjiao/release-builders/mcvine/EXPORT/share/mcvine/instruments/ARCS/source_sct521_bu_17_1.dat...
** mpi4py NOT available
* pyre mpi available
Loading moderator file /SNS/users/linjiao/release-builders/mcvine/EXPORT/share/mcvine/instruments/ARCS/source_sct521_bu_17_1.dat
/SNS/users/linjiao/release-builders/mcvine/EXPORT/share/mcvine/instruments/ARCS/source_sct521_bu_17_1.dat
total vals: 12690
idx3 = 1
totalvals = 12690
Ecoltmp[0] = 1e-05
tcoltmp[0] = 0
Start calculating probability distribution
0 
nEvals = 140, ntvals = 90
Finished calculating probability distribution
* initialize Fermi_chop2
 + w=0.060364, len=0.1, ymax=0.0325, ymin=-0.0325, nu=480, delta=0
 + tc=0.00296821,bw=0.00041,nchan=31,blader=0.5801
sw: 0.001524 rad: 0.0595477
/SNS/users/linjiao/release-builders/mcvine/EXPORT/modules/numpyext/__init__.py:33: DeprecationWarning: PyArray_FromDimsAndDataAndDescr: use PyArray_NewFromDescr.
  return binding.wrapdataptr( ptr, dtype, size )
finalize component "monitor1"
/SNS/users/linjiao/release-builders/mcvine/EXPORT/modules/mcni/AbstractComponent.py:40: UserWarning: In NeutronToStorage: Deprecated. should use self.simulation_context.overwrite_datafiles
  warnings.warn(msg)
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
finalize component "monitor1"
finalize component "monitor2"
(13493.5, 436.04000000000002, 0.0, 0.0, 24222042.890000001)
finalize component "guide411"
finalize component "shutter_guide"
finalize component "moderator"
finalize component "guide122"
finalize component "guide121"
finalize component "guide412"
finalize component "fermichopper-100-1.5-SMI"
finalize component "guide311"
finalize component "t0chopper"
finalize component "guide215"
finalize component "guide214"
finalize component "guide211"
finalize component "guide213"
finalize component "guide212"
finalize component "core_vessel_insert"
finalize component "guide131"
finalize component "guide132"
finalize component "guide133"
finalize component "guide112"
finalize component "guide113"
finalize component "guide111"
finalize component "monitor2"
finalize component "monitor1"
finalize component "guide123"
Running beam monitors...
 -> running arcs_analyze_beam --output-dir=out --ncount=363947 --buffer_size=363947 --source.path=_m2sout/neutrons --monitor.mtof.tofmin=0.00312870260996 --monitor.mtof.tofmax=0.00382396985662 --monitor.mtof.ntof=1000 --monitor.menergy.energymin=72.0 --monitor.menergy.energymax=88.0 --monitor.menergy.nenergy=1000...
** mpi4py NOT available
* pyre mpi available
(4.4699999999999998, 0.82999999999999996, 0.0, 0.0, 24222670.460000001)
done.
